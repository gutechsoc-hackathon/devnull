package com.example.gpstrack;

//import com.androidexample.gpsbasics.String;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;


public class GPS extends Activity implements LocationListener {

private LocationManager locationManager;
double lati,longi;

	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		//Location location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
		//if(location != null){
		//onLocationChanged(location);
		//String str = "Latitude: ";//+location.getLatitude()+" \nLongitude: "+location.getLongitude();
		//Toast.makeText(getApplicationContext(), str, Toast.LENGTH_LONG).show();
		
		
		//onLocationChanged(location);
		//CharSequence text = "Hello ";//+ location.getLatitude()+" "+location.getLongitude();
		//String str = "Latitude: "+location.getLatitude()+" \nLongitude: "+location.getLongitude();
		//Toast toast = Toast.makeText(getApplicationContext(), text, Toast.LENGTH_LONG);
		//toast.show();
		
		/*AlertDialog ad = new AlertDialog.Builder(this).create();  
		ad.setCancelable(false); // This blocks the 'BACK' button  
		ad.setMessage("Hello" +" "+ lati + " " + longi );  
		ad.setButton("OK", new DialogInterface.OnClickListener() {  
		    @Override  
		    public void onClick(DialogInterface dialog, int which) {  
		        dialog.dismiss();                   
		    }  
		});  
		ad.show();  */
		
		
		
		/********** get Gps location service LocationManager object ***********/
		locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		
		/*
		  Parameters :
		     First(provider)    :  the name of the provider with which to register 
		     Second(minTime)    :  the minimum time interval for notifications, in milliseconds. This field is only used as a hint to conserve power, and actual time between location updates may be greater or lesser than this value. 
		     Third(minDistance) :  the minimum distance interval for notifications, in meters 
		     Fourth(listener)   :  a {#link LocationListener} whose onLocationChanged(Location) method will be called for each location update 
        */
		
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1000,1, this);
		
		/********* After registration onLocationChanged method called periodically after each 3 sec ***********/
	}
	
	/************* Called after each 3 sec **********/
	@Override
	public void onLocationChanged(Location location) {
		//CharSequence text = "Hello toast!";
		//String str = "Latitude: "+location.getLatitude()+" \nLongitude: "+location.getLongitude();
		//Toast toast = Toast.makeText(getApplicationContext(), text, Toast.LENGTH_LONG);
		//toast.show();
		String str = "Latitude: "+location.getLatitude()+" \nLongitude: "+location.getLongitude();
		Toast.makeText(getBaseContext(), str, Toast.LENGTH_LONG).show();
		//Log.d("gps:",str);
		//this.lati = location.getLatitude();
		//this.longi = location.getLongitude();
		
	}

	@Override
	public void onProviderDisabled(String provider) {
		
		/******** Called when User off Gps *********/
		
		Toast.makeText(getBaseContext(), "Gps turned off ", Toast.LENGTH_LONG).show();
	}

	@Override
	public void onProviderEnabled(String provider) {
		
		/******** Called when User on Gps  *********/
		
		Toast.makeText(getBaseContext(), "Gps turned on ", Toast.LENGTH_LONG).show();
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		
	}
}

	
	

